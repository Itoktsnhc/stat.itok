@page "/"
@using System.ComponentModel.DataAnnotations;
@using Havit;
@using Mapster;
@using System.Text.Json;
@using Toolbelt.Blazor.I18nText;
@inject NavigationManager Navigation
@inject IJSRuntime jsRuntime
@inject HttpClient Http
@inject JsonSerializerOptions jsonOptions
@inject Toolbelt.Blazor.I18nText.I18nText I18nText


<PageTitle>A tool for splat3</PageTitle>
<div class="form-row align-items-center text-muted px-4">
    <div class="col-1">
        <select class="form-control form-control-sm" style="margin-left:-25px" @onchange="OnChangeCurrentLang">
            <option value="en" selected="@(CurrentLang == "en")">English</option>
            <option value="zh" selected="@(CurrentLang == "zh")">中文</option>
        </select>
    </div>
</div>

<div class="h2"><a href="https://github.com/Itoktsnhc/stat.itok">stat.itok</a>: @Text.Intro</div>
<hr />
<div class="container-fluid">
    <div class="row justify-content-lg-center">
        <div class="form-control">
            <ul class="h6">
                <li>@Text.LoginToNintendoAccount</li>
                <li>@Text.WaitForTheRedirectLink</li>
                <li>@Text.CopyBtnInfo</li>
            </ul>
            <HxButton Text="@Text.GetAuthUrlBtnLabel" Color=ThemeColor.Light Spinner="waitingVerifyUrl" OnClick="async () => await GetCopyRedirectionUrlAsync()"></HxButton>
            <a class="link-info" hidden="@(string.IsNullOrEmpty(jobConfig.NinAuthContext.TokenCopyInfo.CopyRedirectionUrl))"
               href="@jobConfig.NinAuthContext.TokenCopyInfo.CopyRedirectionUrl" target="_blank">
                @Text.ToCopyRedirectInfoText
            </a>
            <br />
            <hr />
            <ul>
                <li>@Text.RedirectLinkTextLabel</li>
            </ul>
            <HxInputText Label="@Text.RedirectLinkLabel" @bind-Value=@jobConfig.NinAuthContext.TokenCopyInfo.RedirectUrl Placeholder="@Text.RedirectLinkPlaceHolder" />
            <br />
            <HxButton Enabled=@(!string.IsNullOrEmpty(jobConfig.NinAuthContext.TokenCopyInfo.RedirectUrl)) Text="@Text.BtnAuthAccountInfoText" Color=ThemeColor.Primary Spinner="waitingAuthAccount" OnClick="async () => await TryAuthAccontInfoAsync()"></HxButton>
            <br />
            <HxCollapse @ref="detailCard" Id="myCollapse" CssClass="mt-3">
                <HxCard>
                    <BodyTemplate>
                        <HxCardText>
                            <div class="p-1"><span>@Text.TextLabelAccountId&emsp;:&emsp; </span> @jobConfig.NinAuthContext.UserInfo.Id</div>
                            <div class="p-1"><span>@Text.TextLabelAccountName&emsp;&emsp;:&emsp; </span> @jobConfig.NinAuthContext.UserInfo.Nickname</div>
                            <div class="p-1"><span>@Text.TextLabelAccountCountryOrArea:&emsp; </span> @jobConfig.NinAuthContext.UserInfo.Country</div>
                        </HxCardText>
                    </BodyTemplate>
                </HxCard>
            </HxCollapse>
            <br />
            <HxSelect Label="@Text.InputLangOverrideLabel"
                      TItem="UserLang"
                      TValue="string"
                      InputGroupStartText="@Text.InputLangOverrideStart"
                      Data="langs"
                      @bind-Value="userLang"
                      Nullable="false"
                      TextSelector="@(p => p.ShowName)"
                      ValueSelector="@(p => p.Value)" />
            <hr />

            <HxInputText Label="@Text.InputStatInkApiLabel" @bind-Value=@jobConfig.StatInkApiKey Placeholder="@Text.InputStatInkApiPlaceholder" />
            <a class="link-info" href="https://stat.ink/profile" target="_blank">
                @Text.InputStatInkAPILinkInnerText
            </a>
            <br />
            <hr />
            <HxMultiSelect Label="@Text.InputBattleTypesLabel"
                           TItem="BattleType"
                           TValue="string"
                           Data="@battleConfigs"
                           @bind-Value="@jobConfig.EnabledQueries"
                           NullDataText="@Text.InputBattleTypesPlaceHolder"
                           EmptyText="@Text.InputBattleTypesPlaceHolder"
                           TextSelector="@(p => p.Name)"
                           ValueSelector="@(p => p.Value)" />
            <br />
            <hr />
            <HxButton Enabled=@(IsFormOk())
                      Text="@Text.BtnSubmitText" Color=ThemeColor.Primary Spinner="waitingSubmit"
                      OnClick="async () => await UpsertJobConfigAsync()"></HxButton>
        </div>
    </div>
</div>



@code
{
    Stat.Itok.Client.I18nText.Text Text = new();
    [Inject] protected IHxMessageBoxService MessageBox { get; set; }
    private string userLang = "zh-CN";
    private List<BattleType> battleConfigs = new List<BattleType>() { };
    private HxCollapse detailCard;
    bool waitingVerifyUrl = false;
    bool waitingAuthAccount = false;
    bool waitingSubmit = false;
    private JobConfigLite jobConfig = new JobConfigLite();
    private IList<UserLang> langs = new List<UserLang>()
    {
        new UserLang("zh-CN", "zh-CN"),
        new UserLang("zh-TW", "zh-TW"),
        new UserLang("en-US", "en-US"),
    };

    public bool IsFormOk()
    {
        return
        !string.IsNullOrEmpty(jobConfig?.NinAuthContext?.UserInfo?.Id)
        && !string.IsNullOrEmpty(jobConfig?.StatInkApiKey)
        && !string.IsNullOrEmpty(jobConfig.NinAuthContext.SessionToken)
        && jobConfig.EnabledQueries?.Any() == true;
    }

    public async Task GetCopyRedirectionUrlAsync()
    {
        jobConfig = new JobConfigLite();
        waitingVerifyUrl = true;
        try
        {
            var resp = await Http.GetFromJsonAsync<ApiResp<NinTokenCopyInfo>>("/api/nin/verify_url", jsonOptions);
            if (resp.Result)
            {
                resp.Data.Adapt(jobConfig.NinAuthContext.TokenCopyInfo);
            }
            else
            {
                throw new Exception(resp.Msg);
            }
        }
        catch (Exception ex)
        {
            _ = await MessageBox.ShowAsync(new MessageBoxRequest()
                {
                    Text = ex.Message,
                    Title = "请求出错",
                    ShowCloseButton = true,
                    Buttons = MessageBoxButtons.Ignore
                });
        }
        waitingVerifyUrl = false;
    }

    public async Task TryAuthAccontInfoAsync()
    {
        waitingAuthAccount = true;
        try
        {
            var rawResp = await Http.PostAsJsonAsync<NinTokenCopyInfo>("/api/nin/auth_account", jobConfig.NinAuthContext.TokenCopyInfo);
            var strResp = await rawResp.Content.ReadAsStringAsync();
            var resp = JsonSerializer.Deserialize<ApiResp<NinAuthContext>>(strResp, jsonOptions);
            if (resp.Result)
            {
                resp.Data.Adapt(jobConfig.NinAuthContext);
            }
            else
            {
                throw new Exception(resp.Msg);
            }
            await detailCard.ShowAsync();
        }
        catch (Exception ex)
        {
            _ = await MessageBox.ShowAsync(new MessageBoxRequest()
                {
                    Text = ex.Message,
                    Title = "请求出错",
                    ShowCloseButton = true,
                    Buttons = MessageBoxButtons.Ok
                });
        }
        waitingAuthAccount = false;
    }

    public async Task UpsertJobConfigAsync()
    {
        waitingSubmit = true;
        try
        {
            jobConfig.ForcedUserLang = userLang;
            jobConfig.NinAuthContext.UserInfo.Lang = jobConfig.ForcedUserLang;

            var rawResp = await Http.PostAsJsonAsync("/api/job_config/upsert", jobConfig);
            var strResp = await rawResp.Content.ReadAsStringAsync();
            var resp = JsonSerializer.Deserialize<ApiResp<JobConfigLite>>(strResp, jsonOptions);
            if (!resp.Result)
            {
                throw new Exception($"{resp.Msg}");
            }

            _ = await MessageBox.ShowAsync(new MessageBoxRequest()
                {
                    Text = $"后台任务已创建成功",
                    Title = "请求成功",
                    ShowCloseButton = true,
                    Buttons = MessageBoxButtons.Ok
                });
        }
        catch (Exception ex)
        {
            _ = await MessageBox.ShowAsync(new MessageBoxRequest()
                {
                    Text = ex.Message,
                    Title = "请求出错",
                    ShowCloseButton = true,
                    Buttons = MessageBoxButtons.Ok
                });
        }
        waitingSubmit = false;
    }
    record UserLang(string ShowName, string Value);
    record BattleType(string Name, string Value);
    protected override async Task OnInitializedAsync()
    {
        Text = await I18nText.GetTextTableAsync<Stat.Itok.Client.I18nText.Text>(this);
        var lang = await I18nText.GetCurrentLanguageAsync();
        if (new[] { "zh", "en" }.Contains(lang.Split('-')[0]))
        {
            CurrentLang = lang;
        }
        else
        {
            CurrentLang = "en";
        }

        Text = await I18nText.GetTextTableAsync<Stat.Itok.Client.I18nText.Text>(this);
        I18nText.ChangeLanguage += (s, a) =>
        {
            Console.WriteLine($"Language Changed: {a.LanguageCode}");
        };
        battleConfigs = new List<BattleType>()
        {
            new BattleType(Text.SelectionItemBankaraBattleHistories, nameof(QueryHash.BankaraBattleHistories)),
            new BattleType(Text.SelectionItemRegularBattleHistories, nameof(QueryHash.RegularBattleHistories)),
        };
        await base.OnInitializedAsync();
    }

    private string CurrentLang;

    private async Task OnChangeCurrentLang(ChangeEventArgs args)
    {
        Console.WriteLine($"OnChange: {args.Value}");
        CurrentLang = args.Value as string;
        await I18nText.SetCurrentLanguageAsync(CurrentLang);
        battleConfigs = new List<BattleType>()
        {
            new BattleType(Text.SelectionItemBankaraBattleHistories, nameof(QueryHash.BankaraBattleHistories)),
            new BattleType(Text.SelectionItemRegularBattleHistories, nameof(QueryHash.RegularBattleHistories)),
        };
    }

}