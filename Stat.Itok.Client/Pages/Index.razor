@page "/"
@using System.ComponentModel.DataAnnotations;
@using Havit;
@using Mapster;
@using System.Text.Json;
@inject NavigationManager Navigation
@inject IJSRuntime jsRuntime
@inject HttpClient Http
@inject JsonSerializerOptions jsonOptions

<PageTitle>A tool for splat3</PageTitle>

<div class="h2">stat.itok 一个给<a href="https://stat.ink/" target="_blank">stat.ink</a>提交数据的工具</div>
<hr />
<div class="container-fluid">
    <div class="row justify-content-lg-center">
        <div class="form-control">
            <ul class="h6">
                <li>在同一个浏览器内登录任天堂账号</li>
                <li>点击 <span class="bg-info">获取认证URL</span> , 等待出现 <span class="bg-info">去复制重定向链接</span> 然后点击</li>
                <li>在打开的页面中，鼠标右键点击红色的 <span class="bg-warning">选择此人</span> 按钮, 右键菜单中点击 <span class="bg-info">复制链接</span> </li>
            </ul>
            <HxButton Text="获取认证URL" Color=ThemeColor.Light Spinner="waitingVerifyUrl" OnClick="async () => await GetCopyRedirectionUrlAsync()"></HxButton>
            <a class="link-info" hidden="@(string.IsNullOrEmpty(jobConfig.NinAuthContext.TokenCopyInfo.CopyRedirectionUrl))"
               href="@jobConfig.NinAuthContext.TokenCopyInfo.CopyRedirectionUrl" target="_blank">
                去复制重定向链接
            </a>
            <br />
            <hr />
            <ul>
                <li>粘贴到下方 <span class="bg-warning">重定向链接</span> 中, 点击<span class="bg-danger">进行账号验证</span></li>
            </ul>
            <HxInputText Label="重定向链接" @bind-Value=@jobConfig.NinAuthContext.TokenCopyInfo.RedirectUrl Placeholder="粘贴重定向链接" />
            <br />
            <HxButton Enabled=@(!string.IsNullOrEmpty(jobConfig.NinAuthContext.TokenCopyInfo.RedirectUrl)) Text="进行账号验证" Color=ThemeColor.Primary Spinner="waitingAuthAccount" OnClick="async () => await TryAuthAccontInfoAsync()"></HxButton>
            <br />
            <HxCollapse @ref="detailCard" Id="myCollapse" CssClass="mt-3">
                <HxCard>
                    <BodyTemplate>
                        <HxCardText>
                            <div class="p-1"><span>账户标识&emsp;:&emsp; </span> @jobConfig.NinAuthContext.UserInfo.Id</div>
                            <div class="p-1"><span>账户名&emsp;&emsp;:&emsp; </span> @jobConfig.NinAuthContext.UserInfo.Nickname</div>
                            <div class="p-1"><span>国家或地区:&emsp; </span> @jobConfig.NinAuthContext.UserInfo.Country</div>
                        </HxCardText>
                    </BodyTemplate>
                </HxCard>
            </HxCollapse>
            <br />
            <HxSelect Label="覆盖账户中获取的语言(影响铭牌、奖牌等的描述)"
                      TItem="UserLang"
                      TValue="string"
                      InputGroupStartText="语言"
                      Data="langs"
                      @bind-Value="userLang"
                      Nullable="false"
                      TextSelector="@(p => p.ShowName)"
                      ValueSelector="@(p => p.Value)" />
            <hr />

            <HxInputText Label="stat.ink Api密钥" @bind-Value=@jobConfig.StatInkApiKey Placeholder="粘贴stat.ink的Api密钥" />
            <a class="link-info" href="https://stat.ink/profile" target="_blank">
                去 stat.ink 复制Api密钥
            </a>
            <br />
            <hr />
            <HxMultiSelect Label="监控的对战类型"
                           TItem="BattleType"
                           TValue="string"
                           Data="@battleConfigs"
                           @bind-Value="@jobConfig.EnabledQueries"
                           NullDataText="---选择需要监控的对战类型---"
                           EmptyText="---选择需要监控的对战类型---"
                           TextSelector="@(p => p.Name)"
                           ValueSelector="@(p => p.Value)" />
            <br />
            <hr />
            <HxButton Enabled=@(IsFormOk())
                      Text="确认并提交" Color=ThemeColor.Primary Spinner="waitingSubmit"
                      OnClick="async () => await UpsertJobConfigAsync()"></HxButton>
        </div>
    </div>
</div>

@code
{
    [Inject] protected IHxMessageBoxService MessageBox { get; set; }
    private string userLang = "zh-CN";
    private List<BattleType> battleConfigs = new List<BattleType>()
    {
        new BattleType("真格",nameof(QueryHash.BankaraBattleHistories)),
        new BattleType("涂地(包含祭典)",nameof(QueryHash.RegularBattleHistories)),
    };
    private HxCollapse detailCard;
    bool waitingVerifyUrl = false;
    bool waitingAuthAccount = false;
    bool waitingSubmit = false;
    private JobConfigLite jobConfig = new JobConfigLite();
    private IList<UserLang> langs = new List<UserLang>()
    {
        new UserLang("简体中文(zh-CN)", "zh-CN"),
        new UserLang("繁体中文(zh-TW)", "zh-TW"),
        new UserLang("美式英语(en-US)", "en-US"),
    };

    public bool IsFormOk()
    {
        return
        !string.IsNullOrEmpty(jobConfig?.NinAuthContext?.UserInfo?.Id)
        && !string.IsNullOrEmpty(jobConfig?.StatInkApiKey)
        && !string.IsNullOrEmpty(jobConfig.NinAuthContext.SessionToken)
        && jobConfig.EnabledQueries?.Any() == true;
    }

    public async Task GetCopyRedirectionUrlAsync()
    {
        jobConfig = new JobConfigLite();
        waitingVerifyUrl = true;
        try
        {
            var resp = await Http.GetFromJsonAsync<ApiResp<NinTokenCopyInfo>>("/api/nin/verify_url", jsonOptions);
            if (resp.Result)
            {
                resp.Data.Adapt(jobConfig.NinAuthContext.TokenCopyInfo);
            }
            else
            {
                throw new Exception(resp.Msg);
            }
        }
        catch (Exception ex)
        {
            _ = await MessageBox.ShowAsync(new MessageBoxRequest()
                {
                    Text = ex.Message,
                    Title = "请求出错",
                    ShowCloseButton = true,
                    Buttons = MessageBoxButtons.Ignore
                });
        }
        waitingVerifyUrl = false;
    }

    public async Task TryAuthAccontInfoAsync()
    {
        waitingAuthAccount = true;
        try
        {
            var rawResp = await Http.PostAsJsonAsync<NinTokenCopyInfo>("/api/nin/auth_account", jobConfig.NinAuthContext.TokenCopyInfo);
            var strResp = await rawResp.Content.ReadAsStringAsync();
            var resp = JsonSerializer.Deserialize<ApiResp<NinAuthContext>>(strResp, jsonOptions);
            if (resp.Result)
            {
                resp.Data.Adapt(jobConfig.NinAuthContext);
            }
            else
            {
                throw new Exception(resp.Msg);
            }
            await detailCard.ShowAsync();
        }
        catch (Exception ex)
        {
            _ = await MessageBox.ShowAsync(new MessageBoxRequest()
                {
                    Text = ex.Message,
                    Title = "请求出错",
                    ShowCloseButton = true,
                    Buttons = MessageBoxButtons.Ok
                });
        }
        waitingAuthAccount = false;
    }

    public async Task UpsertJobConfigAsync()
    {
        waitingSubmit = true;
        try
        {
            jobConfig.ForcedUserLang = userLang;
            jobConfig.NinAuthContext.UserInfo.Lang = jobConfig.ForcedUserLang;

            var rawResp = await Http.PostAsJsonAsync("/api/job_config/upsert", jobConfig);
            var strResp = await rawResp.Content.ReadAsStringAsync();
            var resp = JsonSerializer.Deserialize<ApiResp<JobConfigLite>>(strResp, jsonOptions);
            if (!resp.Result)
            {
                throw new Exception($"{resp.Msg}");
            }

            _ = await MessageBox.ShowAsync(new MessageBoxRequest()
                {
                    Text = $"后台任务已创建成功",
                    Title = "请求成功",
                    ShowCloseButton = true,
                    Buttons = MessageBoxButtons.Ok
                });
        }
        catch (Exception ex)
        {
            _ = await MessageBox.ShowAsync(new MessageBoxRequest()
                {
                    Text = ex.Message,
                    Title = "请求出错",
                    ShowCloseButton = true,
                    Buttons = MessageBoxButtons.Ok
                });
        }
        waitingSubmit = false;
    }
    record UserLang(string ShowName, string Value);
    record BattleType(string Name, string Value);

}